---
title: "Upland Initial Analysis"
author: "Laura W Ploughe"
format: html
editor: visual
---

## Overview

Data were wrangled initially in *data_wrangle_calculations.R* anddata_wrangle4_codyn.R*.* This script uses objects created in the later.

## Richness models

Sites with more than one ecosite

Model Parameters

| Response Variable | Transformation | Fixed Effects       | Random Effects                      |
|----------|-------------|-----------------|---------------------------------|
| Richness          | sqrt           | EcoSite\*SampleYear | 1\|EventPanel:Plot:Transect:Quadrat |

: Fixed and random effects for richness models as well as transformations (if performed).

```{r 'load'}
#| echo: FALSE
#| message: FALSE
#| include: FALSE

#This will load the necessary objects that were created in the script: data_wrangle4_codyn.R 
load(file="calculated_dfs")
lapply(packages, library, character.only = T) #load packages
```

```{r}
#| include: false
#| echo: false
#knitr::clean_cache()
```

## **Richness - Parks with more than one Ecosite**

```{r 'richmodel'}
#| echo: FALSE

rich_ecosite_anova_results <- data.frame() # make an empty dataframe for results

#Create richness models for sites with more than one EcoSite
#Model parameters:
#Y = Sqrt richness
#FixedEffects = Sample Year (EventYEar -4007) by EcoSite
#RandomEffects = 1 intercept, eventpanel *plot*Transect*Quadrat

for (i in 1:length(community_ecosite_park)){ #run a loop over the dataframes in the list
  rich_mod <- lmer(sqrt(richness)~SampleYear*EcoSite + (1|EventPanel:Plot:Transect:Quadrat) ,data= community_ecosite_park[[i]])
  results_df<-anova(rich_mod) %>%  #run anova
    as.data.frame() %>% #save results as dataframe
    rownames_to_column(var = "FixedEffect") %>%  #change rownames to a column, these are the fixed effects of the model (factors)
    rename(p.value="Pr(>F)") %>% 
    mutate(Park = parks_ecosite[i],
           Significance = case_when(p.value<0.0001 ~ "****",
                                    p.value<0.001 ~ "***",
                                    p.value<0.01 ~ "**",
                                    p.value<0.05 ~ "*",
                                    p.value<0.1 ~ " †",
                                    p.value >=0.1 ~ "NS"))
    assign(paste("rich_mod", parks_ecosite[i], sep ="_"), rich_mod)
    rich_ecosite_anova_results = rbind(rich_ecosite_anova_results, results_df)
}

rich_ecosite_anova_results_ls <- rich_ecosite_anova_results %>% 
  split(., rich_ecosite_anova_results$Park)
ecosite_rich_model_results=data.frame()

for (i in 1:length(parks_ecosite)){
ecosite_rich_model_results_park<-rich_ecosite_anova_results %>% 
  filter(Park%in%parks_ecosite[i]) %>% 
  mutate(p_value =  case_when(p.value<0.0001 ~ "<0.0001",
                                    p.value<0.001 ~ "<0.001",
                                    p.value<0.01 ~ as.character(round(p.value, 4)),
                                    p.value<0.05 ~ as.character(round(p.value, 4)),
                                    p.value<0.1 ~ as.character(round(p.value, 4)),
                                    p.value >=0.1 ~ as.character(round(p.value, 4)))) %>% 
  dplyr::select(Park, FixedEffect, `Sum Sq`, `Mean Sq`, NumDF, DenDF, `F value`,
                p_value, Significance)
  assign(paste("rich_mod_results", parks_ecosite[i], sep ="_"),ecosite_rich_model_results_park)
  ecosite_rich_model_results <-  rbind(ecosite_rich_model_results,ecosite_rich_model_results_park)
}

#Create a loop to present the findings

# rich_mod_results <- ls(pattern="rich_mod_results")
# for (i in 1:length(rich_mod_results)){
#   print(knitr::kable(get(rich_mod_results[i])))
# }
  
#knitr::kable(ecosite_rich_model_results)

# Run models for parks that do not have more than one ecosite -------------


parks_noecosite <- names(community_noecosite_park)

#create empty dataframes to load results into
rich_noecosite_anova_results <- data.frame() # make an empty dataframe for results

#Create richness models for sites with more than one EcoSite
#Model parameters:
#Y = Sqrt richness
#FixedEffects = Sample Year (EventYEar -4007) by EcoSite
#RandomEffects = 1 intercept, eventpanel *plot*Transect*Quadrat
for (i in 1:length(community_noecosite_park)){ #run a loop over the dataframes in the list
  rich_mod <- lmer(sqrt(richness)~SampleYear + (1|EventPanel:Plot:Transect:Quadrat) ,data= community_noecosite_park[[i]])
  results_df<-anova(rich_mod) %>%  #run anova
    as.data.frame() %>% #save results as dataframe
    rownames_to_column(var = "FixedEffect") %>%  #change rownames to a column, these are the fixed effects of the model (factors)
    rename(p.value="Pr(>F)") %>% 
    mutate(Park = parks_noecosite[i],
           Significance = case_when(p.value<0.0001 ~ "****",
                                    p.value<0.001 ~ "***",
                                    p.value<0.01 ~ "**",
                                    p.value<0.05 ~ "*",
                                    p.value<0.1 ~ "†",
                                    p.value >=0.1 ~ "NS"))
  
  assign(paste("rich_mod", parks_noecosite[i], sep ="_"), rich_mod)
  rich_noecosite_anova_results <-  rbind(rich_noecosite_anova_results, results_df)
}

rich_noecosite_anova_results_ls <- rich_noecosite_anova_results %>% 
  split(., rich_noecosite_anova_results$Park)
noecosite_rich_model_results=data.frame()

for (i in 1:length(parks_noecosite)){
  noecosite_rich_model_results_park<-rich_noecosite_anova_results %>% 
    filter(Park%in%parks_noecosite[i]) %>% 
    mutate(p_value =  case_when(p.value<0.0001 ~ "<0.0001",
                                p.value<0.001 ~ "<0.001",
                                p.value<0.01 ~ as.character(round(p.value, 4)),
                                p.value<0.05 ~ as.character(round(p.value, 4)),
                                p.value<0.1 ~ as.character(round(p.value, 4)),
                                p.value >=0.1 ~ as.character(round(p.value, 4)))) %>% 
    dplyr::select(Park, FixedEffect, `Sum Sq`, `Mean Sq`, NumDF, DenDF, `F value`,
                   p_value, Significance)
  assign(paste("rich_mod_results", parks_noecosite[i], sep ="_"),noecosite_rich_model_results_park)
  noecosite_rich_model_results <-  rbind(noecosite_rich_model_results,noecosite_rich_model_results_park)
}


# #Explore model assumptions
# par(mfrow = c(4, 3))
# shapiro_community_ecosite <- data.frame()
# 
# 
# for (i in 1:length(community_ecosite_park)){ #run a loop over the dataframes in the list
#   qqnorm(resid(get(paste("rich_mod", parks_ecosite[i], sep="_"))), main = paste("Q-Q Plot", parks_ecosite[i], sep=" "))
#   hist(resid(get(paste("rich_mod", parks_ecosite[i], sep="_"))), main = paste("Histogram", parks_ecosite[i], sep=" "))
#   shapiro <- shapiro.test(resid(get(paste("rich_mod", parks_ecosite[i], sep="_"))))
#   p_value = cbind(parks_ecosite[i], shapiro$p.value) 
#   
#   shapiro_community_ecosite <- rbind(shapiro_community_ecosite, p_value)
#   
# }
# #Explore model assumptions
# par(mfrow = c(3, 3))
# shapiro_community_noecosite <- data.frame()
# 
# 
# for (i in 1:length(community_noecosite_park)){ #run a loop over the dataframes in the list
#   qqnorm(resid(get(paste("rich_mod", parks_noecosite[i], sep="_"))), main = paste("Q-Q Plot", parks_noecosite[i], sep=" "))
#   hist(resid(get(paste("rich_mod", parks_noecosite[i], sep="_"))), main = paste("Histogram", parks_noecosite[i], sep=" "))
#   shapiro <- shapiro.test(resid(get(paste("rich_mod", parks_noecosite[i], sep="_"))))
#   p_value = cbind(parks_noecosite[i], shapiro$p.value) 
#   
#   shapiro_community_noecosite <- rbind(shapiro_community_noecosite, p_value)
#   
# }


```

## 

```{r 'graph_parameters'}
#| echo: FALSE

# #Set graph parameters ---------------------------------------------------

theme_set(theme_bw(12))

#set colors and other settings for plots

#color ecosite park by park
scale_color_park <- function(...){
  ggplot2:::manual_scale(
    'color', 
    values = setNames(c('skyblue3', 'darkolivegreen3', 'turquoise4', 'tan3','lightpink3','aquamarine4'), parks_ecosite), 
    ...
  )
}

#color ecosite by park and ecosite
names_park_ecosite <- sort(unique(community_ecosite$Park_Ecosite))
scale_color_park_ecosite <- function(...){
  ggplot2:::manual_scale(
    'color', 
    values = setNames(c('skyblue3', 'darkolivegreen3', 
                        'turquoise3', 'tan2','lightpink2',
                        'aquamarine3', 'lightpink3',
                        'khaki3','skyblue',
                        'green4','goldenrod',
                        'turquoise4', 'lightpink4'), names_park_ecosite), 
    ...
  )
}

 
scale_color_park_noecosite <- function(...){
  ggplot2:::manual_scale(
    'color', 
    values = setNames(c("#4D004B", "#A6BDDB" ,"#7FCDBB" ,"#2D004B"), parks_noecosite), 
    ...
  )
}

```

## 

```{r 'rich_plots'}
#| echo: FALSE
#| message: FALSE

# Richness plots ----------------------------------------------------------

#couple options for richness plots
#need to think about 
#still need to think about how to display this, don't like the colors right now.
rich_plot_ecosite1 = community_ecosite %>% 
  ggplot(aes(x = SampleYear, y = sqrt(richness))) + 
  geom_jitter(aes(color=Park), alpha =0.01)+
  geom_smooth(aes( color = Park, linetype = EcoSite),method = "glm", se=F, linewidth=1.25 )+
  #scale_color_manual(values = c("blue", "orange"))+
  facet_wrap(~Park)+
  scale_color_park()+
  scale_linetype_manual(values =c("dotted", "solid","dashed", "solid","dashed", "solid", "dashed"))+
  #scale_x_continuous(name = "Experiment Year (years)", breaks = seq(1:length(unique(bugs_div$Year))))+
  #scale_y_continuous(name = "Log Macroinvertebrate Density \n (individuals m-2)", breaks = c(0,10))+
  theme(legend.position = "right")+
  theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank())+
  theme(axis.ticks.length = unit(.3, "cm"), text = element_text(size=15),
        axis.text = element_text(size=12))+
  xlab("Sample Year")+
  ylab(expression(sqrt("Richness (S)")))+
  labs(color  = "Park", linetype = "EcoSite")

  
#rich_plot_ecosite1

# save results
# tiff(here("results","richness","fig_rich_park_ecosite_linetype.tiff"), units="in", width=11, height=7, res=300)
# rich_plot_ecosite1
# dev.off()
rich_ecosite_anova_results <- rich_ecosite_anova_results %>% 
  mutate(fac_abb = case_when(FixedEffect=="SampleYear"~"Y",
                           FixedEffect=="EcoSite"~"E",
                           FixedEffect=="SampleYear:EcoSite"~"Y_E"))

graphLabels_rich_ecosite <- rich_ecosite_anova_results %>% 
  dplyr::select(Park, Significance, fac_abb) %>% 
  pivot_wider(id_cols = Park, names_from = fac_abb, values_from = Significance)

rich_plot_ecosite2 = community_ecosite %>% 
  ggplot(aes(x = SampleYear, y = sqrt(richness))) + 
  geom_jitter(aes(color=Park_Ecosite), alpha =0.05)+
  geom_smooth(aes(color = Park_Ecosite),method = "glm", se=F, linewidth=1.25 )+
  #scale_color_manual(values = c("blue", "orange"))+
  facet_wrap(~Park)+
  scale_color_park_ecosite()+
  theme(legend.position = "top")+
  theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank())+
  theme(axis.ticks.length = unit(.3, "cm"), text = element_text(size=15),
        axis.text = element_text(size=12))+
  xlab("Sample Year")+
  ylab(expression(sqrt("Richness (S)")))+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 0.5, y = 5.5, label = "Year"),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 0.5, y = 5, label = Y),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 5, y = 5.5, label = "Ecosite"),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 5, y = 5, label = E),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 12, y = 5.5, label = "Year:Ecosite"),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_ecosite, aes(x = 12, y = 5, label = Y_E),inherit.aes = FALSE, size=3)


rich_plot_ecosite2

# cvdPlot(rich_plot_ecosite2)
#save results
# tiff(here("results","richness","fig_rich_park_ecosite_color.tiff"), units="in", width=11, height=7, res=300)
# rich_plot_ecosite2
# dev.off()

graphLabels_rich_noecosite <- rich_noecosite_anova_results %>% 
  dplyr::select(Park, Significance, FixedEffect) %>% 
  pivot_wider(id_cols = Park, names_from = FixedEffect, values_from = Significance)

rich_plot_noecosite = community_noecosite %>% 
  ggplot(aes(x = SampleYear, y = sqrt(richness))) + 
  geom_jitter(aes(color=Park), alpha =0.05)+
  geom_smooth(aes( color = Park),method = "glm", se=F, linewidth=1.25 )+
  #scale_color_manual(values = c("blue", "orange"))+
  facet_wrap(~Park)+
  scale_color_park_noecosite()+
  theme(legend.position = "top")+
  theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank())+
  theme(axis.ticks.length = unit(.3, "cm"), text = element_text(size=15),
        axis.text = element_text(size=12))+
  xlab("Sample Year")+
  ylab(expression(sqrt("Richness (S)")))+
  geom_text(data = graphLabels_rich_noecosite, aes(x = 0, y = 5.5, label = "Year"),inherit.aes = FALSE, size=3)+
  geom_text(data = graphLabels_rich_noecosite, aes(x = 0, y = 5, label = SampleYear),inherit.aes = FALSE, size=3)
  


# cvdPlot(rich_plot_noecosite)

# save results
# tiff(here("results","richness","fig_rich_park_noecosite.tiff"), units="in", width=11, height=7, res=300)
# rich_plot_noecosite
# dev.off()
```

### Model Results

```{r 'richmodeldisplay_ecosite'}
#| echo: FALSE
knitr::kable(ecosite_rich_model_results)
```

## **Richness - Parks with one Ecosite**

```{r}
#| echo: false
rich_plot_noecosite
```

### Model Results

```{r 'richmodeldisplay_noecosite'}
#| echo: FALSE

knitr::kable(noecosite_rich_model_results)
```

```{}
```
